{"version":3,"file":"js/332.66b8086d.js","mappings":"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","sources":["webpack://chengshe_homework/./node_modules/core-js/modules/es.iterator.for-each.js","webpack://chengshe_homework/./src/views/AITextExtracts.vue","webpack://chengshe_homework/./src/components/TextOCR.vue","webpack://chengshe_homework/./src/components/TextOCR.vue?3975","webpack://chengshe_homework/./src/components/TextExtracts.vue","webpack://chengshe_homework/./src/components/TextExtracts.vue?5b7f","webpack://chengshe_homework/./src/views/AITextExtracts.vue?866b"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar iterate = require('../internals/iterate');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\n\n// `Iterator.prototype.forEach` method\n// https://tc39.es/ecma262/#sec-iterator.prototype.foreach\n$({ target: 'Iterator', proto: true, real: true }, {\n  forEach: function forEach(fn) {\n    anObject(this);\n    aCallable(fn);\n    var record = getIteratorDirect(this);\n    var counter = 0;\n    iterate(record, function (value) {\n      fn(value, counter++);\n    }, { IS_RECORD: true });\n  }\n});\n","<template>\r\n    <TextExtractContainer />\r\n</template>\r\n\r\n<script>\r\nimport TextExtractContainer from '../components/TextExtracts.vue';\r\n\r\nexport default {\r\n    name: 'App',\r\n    components: {\r\n        TextExtractContainer\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n#app {\r\n    font-family: Avenir, Helvetica, Arial, sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    text-align: center;\r\n    color: #2c3e50;\r\n    margin-top: 0px;\r\n}\r\n</style>","<!-- components/OcrUpload.vue -->\r\n<template>\r\n    <div class=\"TextOCR\">\r\n        <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n            <div class=\"loader\"></div>\r\n        </div>\r\n        <!-- 图片上传区域 -->\r\n        <div class=\"upload-area\" @click=\"triggerUpload\" @dragover.prevent=\"handleDragOver\" @drop.prevent=\"handleDrop\">\r\n            <input ref=\"fileInput\" type=\"file\" accept=\"image/*\" @change=\"handleFileSelect\" style=\"display: none;\">\r\n            <div v-if=\"!previewUrl\" class=\"upload-placeholder\">\r\n                <el-icon :size=\"50\">\r\n                    <Upload />\r\n                </el-icon>\r\n                <div class=\"upload-text\">点击上传图片或拖拽到此区域</div>\r\n            </div>\r\n            <img v-else :src=\"previewUrl\" class=\"preview-image\" />\r\n        </div>\r\n\r\n        <!-- 文本编辑区域 -->\r\n        <div class=\"text-editor\">\r\n            <el-input v-model=\"ocrText\" type=\"textarea\" :rows=\"15\" placeholder=\"识别结果将显示在此处\" resize=\"none\" />\r\n            <div class=\"action-buttons\">\r\n                <el-button type=\"primary\" @click=\"handleConfirm\" :disabled=\"!ocrText\">\r\n                    确认使用\r\n                </el-button>\r\n                <el-button @click=\"handleCancel\">取消</el-button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineEmits } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nconst emit = defineEmits(['confirm', 'cancel'])\r\n\r\nconst fileInput = ref(null)\r\nconst previewUrl = ref('')\r\nconst ocrText = ref('')\r\n\r\n// 等待状态\r\nconst isLoading = ref(false);\r\n\r\n// 图片上传函数\r\n// 点击\r\nconst triggerUpload = () => {\r\n    fileInput.value?.click()\r\n}\r\n// 拖拽图片至区域\r\nconst handleDragOver = (e) => {\r\n    e.dataTransfer.dropEffect = 'copy'\r\n}\r\nconst handleDrop = (e) => {\r\n    const file = e.dataTransfer.files[0]\r\n    if (file) handleFileSelect({ target: { files: [file] } })\r\n}\r\n\r\nconst handleFileSelect = async (e) => {\r\n    const file = e.target.files[0]\r\n    if (!file) return\r\n\r\n    // 验证文件\r\n    if (!file.type.startsWith('image/')) {\r\n        ElMessage.error('请选择图片文件')\r\n        return\r\n    }\r\n\r\n    if (file.size > 5 * 1024 * 1024) {\r\n        ElMessage.error('图片大小不能超过5MB')\r\n        return\r\n    }\r\n\r\n    try {\r\n        isLoading.value = true\r\n        previewUrl.value = URL.createObjectURL(file)\r\n\r\n        // 创建FormData\r\n        const formData = new FormData()\r\n        formData.append('file', file)\r\n\r\n        // 发送请求\r\n        const response = await fetch('http://localhost:5000/api/TextOCR', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n\r\n        const data = await response.json()\r\n        if (data.status === 'success') {\r\n            ocrText.value = data.result\r\n        } else {\r\n            throw new Error(data.message || '识别失败')\r\n        }\r\n    } catch (error) {\r\n        ElMessage.error(`OCR错误: ${error.message}`)\r\n        handleCancel()\r\n    } finally {\r\n        isLoading.value = false\r\n    }\r\n}\r\n\r\nconst handleConfirm = () => {\r\n    emit('confirm', ocrText.value)\r\n    reset()\r\n}\r\n\r\nconst handleCancel = () => {\r\n    emit('cancel')\r\n    reset()\r\n}\r\n\r\nconst reset = () => {\r\n    previewUrl.value = ''\r\n    ocrText.value = ''\r\n    if (fileInput.value) {\r\n        fileInput.value.value = ''\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.TextOCR {\r\n    display: flex;\r\n    gap: 20px;\r\n    padding: 20px;\r\n    border: 1px solid #ebeef5;\r\n    border-radius: 4px;\r\n}\r\n\r\n/* 加载器样式 */\r\n.loading-overlay {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: rgba(255, 255, 255, 0.8);\r\n    z-index: 999;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.loader {\r\n    border: 4px solid #f3f3f3;\r\n    border-top: 4px solid #8B0012;\r\n    border-radius: 50%;\r\n    width: 40px;\r\n    height: 40px;\r\n    animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n    0% {\r\n        transform: rotate(0deg);\r\n    }\r\n\r\n    100% {\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n\r\n.upload-area {\r\n    flex: 1;\r\n    border: 1px dashed #d9d9d9;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n    padding: 20px;\r\n    min-height: 300px;\r\n}\r\n\r\n.upload-placeholder {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n    color: #909399;\r\n}\r\n\r\n.preview-image {\r\n    width: 100%;\r\n    height: auto;\r\n    max-height: 500px;\r\n    object-fit: contain;\r\n}\r\n\r\n.text-editor {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n}\r\n\r\n.action-buttons {\r\n    display: flex;\r\n    gap: 10px;\r\n    justify-content: flex-end;\r\n}\r\n</style>","import script from \"./TextOCR.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TextOCR.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TextOCR.vue?vue&type=style&index=0&id=30408754&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-30408754\"]])\n\nexport default __exports__","<template>\r\n  <div class=\"TextExtractContainer\">\r\n    <h1>自动化摘抄</h1>\r\n    <!-- 加载遮罩层 -->\r\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\r\n      <div class=\"loader\"></div>\r\n    </div>\r\n    <div class=\"input-section\">\r\n      <textarea v-model=\"inputText\" placeholder=\"粘贴或输入您的摘抄内容...\" class=\"text-input\"></textarea>\r\n      <div class=\"button-section\">\r\n        <button @click=\"PictureOCR\" class=\"picture-ocr-btn\" title=\"从图片中提取文字\">📷 图片OCR</button>\r\n        <button @click=\"processText\" class=\"process-btn\" title=\"开始处理文本摘抄\">🚀 摘抄，启动！</button>\r\n        <button v-if=\"excerpts.length\" @click=\"TextExport\" class=\"export-btn\" title=\"导出摘抄内容到文件\">📤 导出摘抄内容 ({{ excerpts.length }}条)</button>\r\n        <button v-if=\"excerpts.length\" @click=\"clearContent\" class=\"clear-btn\" title=\"清空所有摘抄内容\">\r\n          🗑️ 清空内容\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <br>\r\n    <TextOCR v-if=\"StartOCR\" @confirm=\"handleOcrConfirm\" @cancel=\"handleOcrCancel\"/>\r\n\r\n    <div v-if=\"excerpts.length\" class=\"excerpts-list\">\r\n      <div v-for=\"(excerpt, index) in excerpts\" :key=\"index\" class=\"excerpt-item\">\r\n        <div class=\"sentence-box\">\r\n          <span class=\"sentence-num\">#{{ index + 1 }}</span>\r\n          <p class=\"sentence-text\">{{ excerpt.sentence }}</p>\r\n        </div>\r\n        <textarea v-model=\"excerpt.comment\" placeholder=\"输入您的点评...\" class=\"comment-input\"\r\n          @input=\"saveToLocalStorage\"></textarea>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted } from 'vue'\r\nimport axios from 'axios';\r\nimport { ElMessage, ElMessageBox } from 'element-plus';\r\nimport { useConfigStore } from '../../stores/config'\r\nimport TextOCR from './TextOCR.vue';\r\n\r\nconst configStore = useConfigStore()\r\n// 等待状态\r\nconst isLoading = ref(false);\r\n// 开始OCR\r\nconst StartOCR = ref(false);\r\n\r\n// 从设置中获取api参数\r\nconst apiUrl = configStore.settings.textModel.apiUrl\r\nconst apiKey = configStore.settings.textModel.apiKey\r\nconst maxToken = configStore.settings.textModel.params.maxTokens\r\nconst ModelName = configStore.settings.textModel.name\r\nconst ModelTemperature = configStore.settings.textModel.params.temperature\r\n\r\n// 响应式数据\r\nconst inputText = ref('')\r\nconst excerpts = reactive([])\r\n\r\n// 文本处理方法\r\nconst processText = async () => {\r\n  if (inputText.value) {\r\n    // 清空旧数据\r\n    excerpts.splice(0, excerpts.length)\r\n    // 调用大模型处理摘抄\r\n    if (ModelName && apiUrl && ModelName) {\r\n      try {\r\n        isLoading.value = true;\r\n        const response = await axios.post('http://localhost:5000/api/AITextExtracts', {\r\n          config: {\r\n            ModelName: ModelName,\r\n            apiKey: apiKey,\r\n            apiUrl: apiUrl,\r\n            maxToken: maxToken,\r\n            ModelTemperature: ModelTemperature,\r\n          },\r\n          text: inputText.value,\r\n        });\r\n        console.log('提交结果:', response.data);\r\n        // 若返回了摘抄内容\r\n        if (response.data.new_suggestions) {\r\n          //增加摘抄内容\r\n          excerpts.splice(0, excerpts.length, ...response.data.new_suggestions);\r\n        }\r\n      } catch (error) {\r\n        console.error('提交失败:', error);\r\n        ElMessage.error(error)\r\n      } finally {\r\n        isLoading.value = false;\r\n      }\r\n    }\r\n    else {\r\n      ElMessage.error('请填写完整文本大模型api信息！')\r\n    }\r\n    saveToLocalStorage()\r\n  }\r\n  else {\r\n    ElMessage.error('请输入需要摘抄的文本！')\r\n  }\r\n}\r\n\r\n\r\n// 图片OCR\r\nconst PictureOCR = async () => {\r\n  StartOCR.value = true;\r\n}\r\n// 图片OCR结果返回\r\nconst handleOcrConfirm = (text) => {\r\n  inputText.value += text;\r\n  StartOCR.value = false;\r\n}\r\nconst handleOcrCancel = () => {\r\n  StartOCR.value = false;\r\n}\r\n\r\n\r\n// 导出摘抄\r\nconst TextExport = async () => {\r\n  if (excerpts.length === 0) {\r\n    ElMessage.warning('没有摘抄内容可导出！')\r\n    return\r\n  }\r\n\r\n  try {\r\n    const { value: exportFormat } = await ElMessageBox.prompt(\r\n      '请选择导出格式：\\n1. TXT文本文件\\n2. Markdown文件\\n3. Word文档（HTML格式）',\r\n      '选择导出格式',\r\n      {\r\n        confirmButtonText: '导出',\r\n        cancelButtonText: '取消',\r\n        inputPattern: /^[1-3]$/,\r\n        inputErrorMessage: '请输入1-3之间的数字',\r\n        inputValue: '1',\r\n        inputPlaceholder: '请输入1-3'\r\n      }\r\n    )\r\n\r\n    // 显示导出进度\r\n    const loadingMessage = ElMessage({\r\n      message: '正在生成导出文件...',\r\n      type: 'info',\r\n      duration: 0\r\n    })\r\n\r\n    try {\r\n      switch (exportFormat) {\r\n        case '1':\r\n          await exportAsTxt()\r\n          break\r\n        case '2':\r\n          await exportAsMarkdown()\r\n          break\r\n        case '3':\r\n          await exportAsWord()\r\n          break\r\n        default:\r\n          ElMessage.error('无效的导出格式')\r\n      }\r\n    } finally {\r\n      loadingMessage.close()\r\n    }\r\n  } catch (error) {\r\n    if (error !== 'cancel') {\r\n      console.error('导出失败:', error)\r\n      ElMessage.error('导出失败：' + (error.message || '未知错误'))\r\n    }\r\n  }\r\n}\r\n\r\n// 导出为TXT格式\r\nconst exportAsTxt = async () => {\r\n  try {\r\n    const content = generateTxtContent()\r\n    await downloadFile(content, `摘抄内容_${getTimestamp()}.txt`, 'text/plain;charset=utf-8')\r\n    ElMessage.success('TXT文件导出成功！')\r\n  } catch (error) {\r\n    throw new Error('TXT文件导出失败：' + error.message)\r\n  }\r\n}\r\n\r\n// 导出为Markdown格式\r\nconst exportAsMarkdown = async () => {\r\n  try {\r\n    const content = generateMarkdownContent()\r\n    await downloadFile(content, `摘抄内容_${getTimestamp()}.md`, 'text/markdown;charset=utf-8')\r\n    ElMessage.success('Markdown文件导出成功！')\r\n  } catch (error) {\r\n    throw new Error('Markdown文件导出失败：' + error.message)\r\n  }\r\n}\r\n\r\n// 导出为Word格式\r\nconst exportAsWord = async () => {\r\n  try {\r\n    const content = generateWordContent()\r\n    await downloadFile(content, `摘抄内容_${getTimestamp()}.html`, 'text/html;charset=utf-8')\r\n    ElMessage.success('Word文档导出成功！')\r\n  } catch (error) {\r\n    throw new Error('Word文档导出失败：' + error.message)\r\n  }\r\n}\r\n\r\n// 获取时间戳\r\nconst getTimestamp = () => {\r\n  const now = new Date()\r\n  return `${now.getFullYear()}${String(now.getMonth() + 1).padStart(2, '0')}${String(now.getDate()).padStart(2, '0')}_${String(now.getHours()).padStart(2, '0')}${String(now.getMinutes()).padStart(2, '0')}`\r\n}\r\n\r\n// 生成TXT内容\r\nconst generateTxtContent = () => {\r\n  const timestamp = new Date().toLocaleString('zh-CN')\r\n  const totalExcerpts = excerpts.length\r\n  const totalComments = excerpts.filter(excerpt => excerpt.comment && excerpt.comment.trim()).length\r\n  \r\n  let content = `摘抄内容\\n`\r\n  content += `导出时间：${timestamp}\\n`\r\n  content += `总计：${totalExcerpts}条摘抄\\n`\r\n  content += `有点评：${totalComments}条\\n`\r\n  content += `${'='.repeat(50)}\\n\\n`\r\n\r\n  excerpts.forEach((excerpt, index) => {\r\n    content += `${index + 1}. ${excerpt.sentence}\\n`\r\n    if (excerpt.comment && excerpt.comment.trim()) {\r\n      content += `   点评：${excerpt.comment}\\n`\r\n    }\r\n    content += '\\n'\r\n  })\r\n\r\n  return content\r\n}\r\n\r\n// 生成Markdown内容\r\nconst generateMarkdownContent = () => {\r\n  const timestamp = new Date().toLocaleString('zh-CN')\r\n  const totalExcerpts = excerpts.length\r\n  const totalComments = excerpts.filter(excerpt => excerpt.comment && excerpt.comment.trim()).length\r\n  \r\n  let content = `# 摘抄内容\\n\\n`\r\n  content += `**导出时间：** ${timestamp}\\n\\n`\r\n  content += `**统计信息：**\\n`\r\n  content += `- 总计：${totalExcerpts}条摘抄\\n`\r\n  content += `- 有点评：${totalComments}条\\n`\r\n  content += `- 无点评：${totalExcerpts - totalComments}条\\n\\n`\r\n  content += `---\\n\\n`\r\n\r\n  excerpts.forEach((excerpt, index) => {\r\n    content += `## ${index + 1}. ${excerpt.sentence}\\n\\n`\r\n    if (excerpt.comment && excerpt.comment.trim()) {\r\n      content += `**点评：** ${excerpt.comment}\\n\\n`\r\n    }\r\n    content += `---\\n\\n`\r\n  })\r\n\r\n  return content\r\n}\r\n\r\n// 生成Word内容（HTML格式，可转换为Word）\r\nconst generateWordContent = () => {\r\n  const timestamp = new Date().toLocaleString('zh-CN')\r\n  const totalExcerpts = excerpts.length\r\n  const totalComments = excerpts.filter(excerpt => excerpt.comment && excerpt.comment.trim()).length\r\n  \r\n  let content = `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>摘抄内容</title>\r\n    <style>\r\n        body { font-family: 'Microsoft YaHei', Arial, sans-serif; margin: 40px; line-height: 1.6; }\r\n        h1 { color: #333; border-bottom: 2px solid #2196F3; padding-bottom: 10px; }\r\n        h2 { color: #2196F3; margin-top: 30px; }\r\n        .excerpt { margin: 20px 0; padding: 15px; background: #f8f9fa; border-left: 4px solid #2196F3; }\r\n        .comment { margin-top: 10px; padding: 10px; background: #e3f2fd; border-radius: 4px; }\r\n        .timestamp { color: #666; font-size: 14px; }\r\n        .stats { background: #f0f8ff; padding: 15px; border-radius: 8px; margin: 20px 0; }\r\n        .stats ul { margin: 5px 0; padding-left: 20px; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>摘抄内容</h1>\r\n    <p class=\"timestamp\">导出时间：${timestamp}</p>\r\n    \r\n    <div class=\"stats\">\r\n        <h3>统计信息</h3>\r\n        <ul>\r\n            <li>总计：${totalExcerpts}条摘抄</li>\r\n            <li>有点评：${totalComments}条</li>\r\n            <li>无点评：${totalExcerpts - totalComments}条</li>\r\n        </ul>\r\n    </div>\r\n    \r\n    <hr>\r\n`\r\n\r\n  excerpts.forEach((excerpt, index) => {\r\n    content += `\r\n    <div class=\"excerpt\">\r\n        <h2>${index + 1}. ${excerpt.sentence}</h2>\r\n`\r\n    if (excerpt.comment && excerpt.comment.trim()) {\r\n      content += `\r\n        <div class=\"comment\">\r\n            <strong>点评：</strong>${excerpt.comment}\r\n        </div>\r\n`\r\n    }\r\n    content += `    </div>`\r\n  })\r\n\r\n  content += `\r\n</body>\r\n</html>`\r\n\r\n  return content\r\n}\r\n\r\n// 下载文件\r\nconst downloadFile = (content, filename, mimeType) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const blob = new Blob([content], { type: mimeType })\r\n      const url = URL.createObjectURL(blob)\r\n      const link = document.createElement('a')\r\n      link.href = url\r\n      link.download = filename\r\n      link.style.display = 'none'\r\n      \r\n      document.body.appendChild(link)\r\n      link.click()\r\n      document.body.removeChild(link)\r\n      \r\n      // 延迟释放URL对象\r\n      setTimeout(() => {\r\n        URL.revokeObjectURL(url)\r\n      }, 100)\r\n      \r\n      resolve()\r\n    } catch (error) {\r\n      reject(new Error('文件下载失败：' + error.message))\r\n    }\r\n  })\r\n}\r\n\r\n// 本地存储功能\r\nconst saveToLocalStorage = () => {\r\n  localStorage.setItem('excerptsData', JSON.stringify(excerpts))\r\n}\r\n\r\n// 初始化时加载本地数据\r\nonMounted(() => {\r\n  const savedData = localStorage.getItem('excerptsData')\r\n  if (savedData) {\r\n    const parsedData = JSON.parse(savedData)\r\n    excerpts.push(...parsedData)\r\n  }\r\n})\r\n\r\n// 清空内容\r\nconst clearContent = async () => {\r\n  try {\r\n    await ElMessageBox.confirm(\r\n      '确定要清空所有摘抄内容吗？此操作不可恢复！',\r\n      '确认清空',\r\n      {\r\n        confirmButtonText: '确定清空',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n        confirmButtonClass: 'el-button--danger'\r\n      }\r\n    )\r\n    \r\n    // 用户确认后执行清空操作\r\n    inputText.value = ''\r\n    excerpts.splice(0, excerpts.length)\r\n    saveToLocalStorage()\r\n    ElMessage.success('内容已清空！')\r\n  } catch (error) {\r\n    // 用户取消操作，不做任何处理\r\n    if (error !== 'cancel') {\r\n      ElMessage.error('清空操作失败：' + error.message)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.TextExtractContainer {\r\n  max-width: 800px;\r\n  margin: 2rem auto;\r\n  padding: 20px;\r\n}\r\n\r\n/* 加载器样式 */\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  z-index: 999;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.loader {\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #8B0012;\r\n  border-radius: 50%;\r\n  width: 40px;\r\n  height: 40px;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n.text-input {\r\n  width: 100%;\r\n  height: 150px;\r\n  padding: 15px;\r\n  margin: 10px 0;\r\n  border: 2px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  resize: vertical;\r\n}\r\n\r\n.button-section {\r\n  gap: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.process-btn {\r\n  background: #4CAF50;\r\n  color: white;\r\n  padding: 12px 24px;\r\n  border: none;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  font-weight: 500;\r\n}\r\n\r\n.process-btn:hover {\r\n  background: #45a049;\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);\r\n}\r\n\r\n.process-btn:active {\r\n  transform: translateY(0);\r\n  box-shadow: 0 2px 4px rgba(76, 175, 80, 0.3);\r\n}\r\n\r\n.picture-ocr-btn {\r\n  background: #e54110;\r\n  color: white;\r\n  padding: 12px 24px;\r\n  border: none;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  font-weight: 500;\r\n}\r\n\r\n.picture-ocr-btn:hover {\r\n  background: #d43707;\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 4px 8px rgba(229, 65, 16, 0.3);\r\n}\r\n\r\n.picture-ocr-btn:active {\r\n  transform: translateY(0);\r\n  box-shadow: 0 2px 4px rgba(229, 65, 16, 0.3);\r\n}\r\n\r\n.export-btn {\r\n  background: #3844ef;\r\n  color: white;\r\n  padding: 12px 24px;\r\n  border: none;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  font-weight: 500;\r\n}\r\n\r\n.export-btn:hover {\r\n  background: #0614db;\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 4px 8px rgba(56, 68, 239, 0.3);\r\n}\r\n\r\n.export-btn:active {\r\n  transform: translateY(0);\r\n  box-shadow: 0 2px 4px rgba(56, 68, 239, 0.3);\r\n}\r\n\r\n.clear-btn {\r\n  background: #f44336;\r\n  color: white;\r\n  padding: 12px 24px;\r\n  border: none;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  font-weight: 500;\r\n}\r\n\r\n.clear-btn:hover {\r\n  background: #d32f2f;\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 4px 8px rgba(244, 67, 54, 0.3);\r\n}\r\n\r\n.clear-btn:active {\r\n  transform: translateY(0);\r\n  box-shadow: 0 2px 4px rgba(244, 67, 54, 0.3);\r\n}\r\n\r\n.excerpts-list {\r\n  margin-top: 30px;\r\n}\r\n\r\n.excerpt-item {\r\n  margin: 20px 0;\r\n  padding: 15px;\r\n  background: #f8f9fa;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.sentence-box {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.sentence-num {\r\n  background: #2196F3;\r\n  color: white;\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.comment-input {\r\n  align-items: center;\r\n  width: 95%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 6px;\r\n  min-height: 80px;\r\n  resize: vertical;\r\n}\r\n</style>","import script from \"./TextExtracts.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TextExtracts.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TextExtracts.vue?vue&type=style&index=0&id=6906cfd8&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { render } from \"./AITextExtracts.vue?vue&type=template&id=01bff8f7\"\nimport script from \"./AITextExtracts.vue?vue&type=script&lang=js\"\nexport * from \"./AITextExtracts.vue?vue&type=script&lang=js\"\n\nimport \"./AITextExtracts.vue?vue&type=style&index=0&id=01bff8f7&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["$","iterate","aCallable","anObject","getIteratorDirect","target","proto","real","forEach","fn","this","record","counter","value","IS_RECORD","_createBlock","_component_TextExtractContainer","emit","__emit","fileInput","ref","previewUrl","ocrText","isLoading","triggerUpload","click","handleDragOver","e","dataTransfer","dropEffect","handleDrop","file","files","handleFileSelect","async","type","startsWith","size","ElMessage","error","URL","createObjectURL","formData","FormData","append","response","fetch","method","body","data","json","status","Error","message","result","handleCancel","handleConfirm","reset","__exports__","configStore","useConfigStore","StartOCR","apiUrl","settings","textModel","apiKey","maxToken","params","maxTokens","ModelName","name","ModelTemperature","temperature","inputText","excerpts","reactive","processText","splice","length","axios","post","config","text","console","log","new_suggestions","saveToLocalStorage","PictureOCR","handleOcrConfirm","handleOcrCancel","TextExport","exportFormat","ElMessageBox","prompt","confirmButtonText","cancelButtonText","inputPattern","inputErrorMessage","inputValue","inputPlaceholder","loadingMessage","duration","exportAsTxt","exportAsMarkdown","exportAsWord","close","warning","content","generateTxtContent","downloadFile","getTimestamp","success","generateMarkdownContent","generateWordContent","now","Date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","timestamp","toLocaleString","totalExcerpts","totalComments","filter","excerpt","comment","trim","repeat","index","sentence","filename","mimeType","Promise","resolve","reject","blob","Blob","url","link","document","createElement","href","download","style","display","appendChild","removeChild","setTimeout","revokeObjectURL","localStorage","setItem","JSON","stringify","onMounted","savedData","getItem","parsedData","parse","push","clearContent","confirm","confirmButtonClass","components","TextExtractContainer","render"],"sourceRoot":""}